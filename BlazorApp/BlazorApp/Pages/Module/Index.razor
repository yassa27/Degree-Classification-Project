@page "/module/index"
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@using BlazorApp.Common.ViewModels
@using BlazorApp.Services.Interface
@inject ICourseManagementService _Module
@inject NavigationManager NavigationManager

<h3>Modules</h3>
@if (moduleListVM.moduleVMs == null)
{
    <h3>Loading.....</h3>
}else{
    <div class="row">
        <div class="col-md-12">
            <div class="col-12 col-sm-0 text-right mb-2">
                <button class="btn btn-primary mx-2" @onclick="(() => AddMoudle())">
                                        Add New Module
                                    </button></div>
            <table class="table table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Module Name</th> 
                        <th>Module Credit</th>
                        <th>Module Progress</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in moduleListVM.moduleVMs)
                    {
                        <tr>
                            <td>@p.ModuleName</td>
                            <td>@p.ModuleCredit</td>
                            <td>@p.ModuleProgress %</td>
                                <td>
                                  <button class="btn btn-danger mx-2 mb-1" @onclick="(() => Assignment(p.Id))">
                                            Assignments
                                        </button>

                                    @if (idToDelete == p.Id)
                                    {

                                        <button class="btn btn-danger mx-2" @onclick="(() => DeleteModule(p.Id))">
                                            Confirm Delete
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-outline-danger mx-2" @onclick="(() => idToDelete =p.Id)">
                                            Delete
                                        </button>
                                    }
                                </td>
                        </tr>
                    }
                </tbody>
            </table>
              <div class="col-md-4 mb-4"><button class="btn btn-secondary mx-2" @onclick="(() => Dashboard())">
                                        Back to Dashboard
                                    </button></div>
        </div>
    </div>
}
@code {
    private long idToDelete = 0;
    public string UserName;
    string Successmessage = null;
    string Failuremessage = null;
    ModuleListVM moduleListVM = new ModuleListVM();
    protected override async Task OnParametersSetAsync()
    {
        UserName = HttpContextAccessor.HttpContext.User.Identity.Name;
        var res =  _Module.GetUserModules(UserName);
        moduleListVM.moduleVMs = res.moduleVMs;
    }
    private void AddMoudle()
    {
        NavigationManager.NavigateTo("/addmodule");
    }
    private void Dashboard()
    {
        NavigationManager.NavigateTo("/");
    }
    private void Assignment(long id)
    {
        NavigationManager.NavigateTo("./Assignment/index/"+id);
    }
    private async Task DeleteModule(long id)
    {
        var res = _Module.RemoveModule(id,UserName);
        if (res == true)
        {
            Successmessage ="Module Deleted  SuccessFully";
            var response =  _Module.GetUserModules(UserName);
            moduleListVM.moduleVMs = response.moduleVMs;
        }else
        {
            Failuremessage = "Something Wents Wrong... ";
        }
    }
}
